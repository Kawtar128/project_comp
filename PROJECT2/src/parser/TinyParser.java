
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TinyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public TinyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TinyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TinyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\016\005\000\002\016\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\007\000\002\017\003\000\002" +
    "\017\005\000\002\006\006\000\002\007\005\000\002\010" +
    "\004\000\002\011\004\000\002\012\004\000\002\020\004" +
    "\000\002\020\002\000\002\013\004\000\002\021\005\000" +
    "\002\021\002\000\002\014\004\000\002\022\005\000\002" +
    "\022\002\000\002\015\005\000\002\015\003\000\002\015" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\014\004\015\010\005\012\004\013\020\014" +
    "\016\001\002\000\004\014\067\001\002\000\014\004\015" +
    "\010\005\012\004\013\020\014\016\001\002\000\014\002" +
    "\ufffb\006\ufffb\007\ufffb\011\ufffb\017\ufffb\001\002\000\014" +
    "\002\ufffc\006\ufffc\007\ufffc\011\ufffc\017\ufffc\001\002\000" +
    "\014\002\ufff8\006\ufff8\007\ufff8\011\ufff8\017\ufff8\001\002" +
    "\000\004\002\000\001\002\000\014\002\ufffa\006\ufffa\007" +
    "\ufffa\011\ufffa\017\ufffa\001\002\000\004\002\063\001\002" +
    "\000\014\002\ufff9\006\ufff9\007\ufff9\011\ufff9\017\ufff9\001" +
    "\002\000\010\014\021\015\022\020\026\001\002\000\004" +
    "\016\051\001\002\000\014\002\ufffd\006\ufffd\007\ufffd\011" +
    "\ufffd\017\045\001\002\000\010\014\021\015\022\020\026" +
    "\001\002\000\026\002\uffe5\005\uffe5\006\uffe5\007\uffe5\011" +
    "\uffe5\017\uffe5\021\uffe5\034\uffe5\035\uffe5\036\uffe5\001\002" +
    "\000\026\002\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6\017" +
    "\uffe6\021\uffe6\034\uffe6\035\uffe6\036\uffe6\001\002\000\024" +
    "\002\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\017\uffeb\021" +
    "\uffeb\034\uffeb\035\041\001\002\000\026\002\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\011\uffe8\017\uffe8\021\uffe8\034\uffe8\035" +
    "\uffe8\036\036\001\002\000\022\002\uffee\005\uffee\006\uffee" +
    "\007\uffee\011\uffee\017\uffee\021\uffee\034\032\001\002\000" +
    "\010\014\021\015\022\020\026\001\002\000\014\002\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\017\ufff1\001\002\000\004\021" +
    "\031\001\002\000\026\002\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\011\uffe7\017\uffe7\021\uffe7\034\uffe7\035\uffe7\036\uffe7\001" +
    "\002\000\010\014\021\015\022\020\026\001\002\000\020" +
    "\002\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\017\ufff0\021" +
    "\ufff0\001\002\000\020\002\uffef\005\uffef\006\uffef\007\uffef" +
    "\011\uffef\017\uffef\021\uffef\001\002\000\024\002\uffea\005" +
    "\uffea\006\uffea\007\uffea\011\uffea\017\uffea\021\uffea\034\uffea" +
    "\035\uffea\001\002\000\010\014\021\015\022\020\026\001" +
    "\002\000\026\002\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8" +
    "\017\uffe8\021\uffe8\034\uffe8\035\uffe8\036\036\001\002\000" +
    "\024\002\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9" +
    "\021\uffe9\034\uffe9\035\uffe9\001\002\000\010\014\021\015" +
    "\022\020\026\001\002\000\022\002\uffed\005\uffed\006\uffed" +
    "\007\uffed\011\uffed\017\uffed\021\uffed\034\uffed\001\002\000" +
    "\024\002\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\017\uffeb" +
    "\021\uffeb\034\uffeb\035\041\001\002\000\022\002\uffec\005" +
    "\uffec\006\uffec\007\uffec\011\uffec\017\uffec\021\uffec\034\uffec" +
    "\001\002\000\014\004\015\010\005\012\004\013\020\014" +
    "\016\001\002\000\012\002\uffff\006\uffff\007\uffff\011\uffff" +
    "\001\002\000\014\002\ufffd\006\ufffd\007\ufffd\011\ufffd\017" +
    "\045\001\002\000\012\002\ufffe\006\ufffe\007\ufffe\011\ufffe" +
    "\001\002\000\010\014\021\015\022\020\026\001\002\000" +
    "\014\002\ufff3\006\ufff3\007\ufff3\011\ufff3\017\ufff3\001\002" +
    "\000\004\005\054\001\002\000\014\004\015\010\005\012" +
    "\004\013\020\014\016\001\002\000\006\006\057\007\060" +
    "\001\002\000\014\002\ufff7\006\ufff7\007\ufff7\011\ufff7\017" +
    "\ufff7\001\002\000\014\004\015\010\005\012\004\013\020" +
    "\014\016\001\002\000\014\002\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\017\ufff6\001\002\000\004\007\062\001\002\000\014" +
    "\002\ufff5\006\ufff5\007\ufff5\011\ufff5\017\ufff5\001\002\000" +
    "\004\002\001\001\002\000\004\011\065\001\002\000\010" +
    "\014\021\015\022\020\026\001\002\000\014\002\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\017\ufff4\001\002\000\014\002\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\017\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\022\002\012\003\010\004\016\005\006\006" +
    "\005\007\011\010\013\011\007\001\001\000\002\001\001" +
    "\000\020\003\063\004\016\005\006\006\005\007\011\010" +
    "\013\011\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\052\013\024" +
    "\014\022\015\023\001\001\000\002\001\001\000\004\016" +
    "\045\001\001\000\012\012\026\013\024\014\022\015\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\041\001\001\000\004\022\034\001\001\000\004\020\032" +
    "\001\001\000\012\012\027\013\024\014\022\015\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\033\014\022\015\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\036" +
    "\001\001\000\004\022\037\001\001\000\002\001\001\000" +
    "\006\014\042\015\023\001\001\000\002\001\001\000\004" +
    "\021\043\001\001\000\002\001\001\000\016\004\046\005" +
    "\006\006\005\007\011\010\013\011\007\001\001\000\002" +
    "\001\001\000\004\016\047\001\001\000\002\001\001\000" +
    "\012\012\051\013\024\014\022\015\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\054\004\016\005" +
    "\006\006\005\007\011\010\013\011\007\001\001\000\004" +
    "\017\055\001\001\000\002\001\001\000\020\003\060\004" +
    "\016\005\006\006\005\007\011\010\013\011\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\065\013\024" +
    "\014\022\015\023\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TinyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TinyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TinyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    import java_cup.runtime.Symbol;
    import java.util.ArrayList;
    import java.util.List;
    import lexer.TinyLexer;
    import parser.Node;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TinyParser$actions {
  private final TinyParser parser;

  /** Constructor */
  CUP$TinyParser$actions(TinyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TinyParser$do_action_part00000000(
    int                        CUP$TinyParser$act_num,
    java_cup.runtime.lr_parser CUP$TinyParser$parser,
    java.util.Stack            CUP$TinyParser$stack,
    int                        CUP$TinyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TinyParser$result;

      /* select the action based on the action number */
      switch (CUP$TinyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)).value;
		RESULT = start_val;
              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TinyParser$parser.done_parsing();
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmt_sequence 
            {
              Object RESULT =null;
		 
    Node programNode = new Node("program");
    programNode.addChild($1);
    RESULT = programNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_sequence ::= statement stmt_sequence_p 
            {
              Object RESULT =null;
		 
    Node stmtSeqNode = new Node("stmt_sequence");
    stmtSeqNode.addChild($1);
    stmtSeqNode.addChild($2);
    RESULT = stmtSeqNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("stmt_sequence",1, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_sequence_p ::= SEMICOLON statement stmt_sequence_p 
            {
              Object RESULT =null;
		 
    Node stmtSeqPNode = new Node("stmt_sequence_p");
    stmtSeqPNode.addChild(new Node(";"));
    stmtSeqPNode.addChild($2);
    stmtSeqPNode.addChild($3);
    RESULT = stmtSeqPNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("stmt_sequence_p",12, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_sequence_p ::= 
            {
              Object RESULT =null;
		 
    RESULT = new Node("epsilon"); 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("stmt_sequence_p",12, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= if_stmt 
            {
              Object RESULT =null;
		 
    RESULT = $1; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= repeat_stmt 
            {
              Object RESULT =null;
		 
    RESULT = $1; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= assign_stmt 
            {
              Object RESULT =null;
		 
    RESULT = $1; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= read_stmt 
            {
              Object RESULT =null;
		 
    RESULT = $1; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= write_stmt 
            {
              Object RESULT =null;
		 
    RESULT = $1; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // if_stmt ::= IF exp THEN stmt_sequence if_rear 
            {
              Object RESULT =null;
		 
    Node ifNode = new Node("if_stmt");
    ifNode.addChild(new Node("if"));
    ifNode.addChild($2);
    ifNode.addChild(new Node("then"));
    ifNode.addChild($4);
    ifNode.addChild($5);
    RESULT = ifNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-4)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // if_rear ::= END 
            {
              Object RESULT =null;
		 
    Node ifRearNode = new Node("if_rear");
    ifRearNode.addChild(new Node("end"));
    RESULT = ifRearNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("if_rear",13, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // if_rear ::= ELSE stmt_sequence END 
            {
              Object RESULT =null;
		 
    Node ifRearNode = new Node("if_rear");
    ifRearNode.addChild(new Node("else"));
    ifRearNode.addChild($2);
    ifRearRearNode.addChild(new Node("end"));
    RESULT = ifRearNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("if_rear",13, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // repeat_stmt ::= REPEAT stmt_sequence UNTIL exp 
            {
              Object RESULT =null;
		 
    Node repeatNode = new Node("repeat_stmt");
    repeatNode.addChild(new Node("repeat"));
    repeatNode.addChild($2);
    repeatNode.addChild(new Node("until"));
    repeatNode.addChild($4);
    RESULT = repeatNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",4, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // assign_stmt ::= ID ASSIGN exp 
            {
              Object RESULT =null;
		 
    Node assignNode = new Node("assign_stmt");
    assignNode.addChild(new Node("id", (String)$1.value));
    assignNode.addChild(new Node(":="));
    assignNode.addChild($3);
    RESULT = assignNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("assign_stmt",5, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // read_stmt ::= READ ID 
            {
              Object RESULT =null;
		 
    Node readNode = new Node("read_stmt");
    readNode.addChild(new Node("read"));
    readNode.addChild(new Node("id", (String)$2.value));
    RESULT = readNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("read_stmt",6, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // write_stmt ::= WRITE exp 
            {
              Object RESULT =null;
		 
    Node writeNode = new Node("write_stmt");
    writeNode.addChild(new Node("write"));
    writeNode.addChild($2);
    RESULT = writeNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("write_stmt",7, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= simple_exp exp_rear 
            {
              Object RESULT =null;
		 
    Node expNode = new Node("exp");
    expNode.addChild($1);
    expNode.addChild($2);
    RESULT = expNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp_rear ::= relop simple_exp 
            {
              Object RESULT =null;
		 
    Node expRearNode = new Node("exp_rear");
    expRearNode.addChild($1);
    expRearRearNode.addChild($2);
    RESULT = expRearNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("exp_rear",14, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp_rear ::= 
            {
              Object RESULT =null;
		 
    RESULT = new Node("epsilon"); 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("exp_rear",14, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simple_exp ::= term simple_exp_p 
            {
              Object RESULT =null;
		 
    Node simpleExpNode = new Node("simple_exp");
    simpleExpNode.addChild($1);
    simpleExpNode.addChild($2);
    RESULT = simpleExpNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simple_exp_p ::= addop term simple_exp_p 
            {
              Object RESULT =null;
		 
    Node simpleExpPNode = new Node("simple_exp_p");
    simpleExpPNode.addChild($1);
    simpleExpPNode.addChild($2);
    simpleExpPNode.addChild($3);
    RESULT = simpleExpPNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("simple_exp_p",15, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simple_exp_p ::= 
            {
              Object RESULT =null;
		 
    RESULT = new Node("epsilon"); 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("simple_exp_p",15, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // term ::= factor term_p 
            {
              Object RESULT =null;
		 
    Node termNode = new Node("term");
    termNode.addChild($1);
    termNode.addChild($2);
    RESULT = termNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term_p ::= mulop factor term_p 
            {
              Object RESULT =null;
		 
    Node termPNode = new Node("term_p");
    termPNode.addChild($1);
    termPNode.addChild($2);
    termPNode.addChild($3);
    RESULT = termPNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("term_p",16, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term_p ::= 
            {
              Object RESULT =null;
		 
    RESULT = new Node("epsilon"); 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("term_p",16, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // factor ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;
		 
    Node factorNode = new Node("factor");
    factorNode.addChild(new Node("("));
    factorNode.addChild($2);
    factorNode.addChild(new Node(")"));
    RESULT = factorNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.elementAt(CUP$TinyParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= NUM 
            {
              Object RESULT =null;
		 
    Node factorNode = new Node("factor");
    factorNode.addChild(new Node("num", (String)$1.value));
    RESULT = factorNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= ID 
            {
              Object RESULT =null;
		 
    Node factorNode = new Node("factor");
    factorNode.addChild(new Node("id", (String)$1.value));
    RESULT = factorNode; 

              CUP$TinyParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyParser$stack.peek()), RESULT);
            }
          return CUP$TinyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TinyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TinyParser$do_action(
    int                        CUP$TinyParser$act_num,
    java_cup.runtime.lr_parser CUP$TinyParser$parser,
    java.util.Stack            CUP$TinyParser$stack,
    int                        CUP$TinyParser$top)
    throws java.lang.Exception
    {
              return CUP$TinyParser$do_action_part00000000(
                               CUP$TinyParser$act_num,
                               CUP$TinyParser$parser,
                               CUP$TinyParser$stack,
                               CUP$TinyParser$top);
    }
}

}
